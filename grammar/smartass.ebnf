directives:
  autoalias

imports:
  java.util.List
  java.util.Map
  com.github.forax.smartass.ast.Block
  com.github.forax.smartass.ast.Expr
  com.github.forax.smartass.ast.Lambda
  com.github.forax.smartass.ast.Parameter
  com.github.forax.smartass.ast.Token
  
priorities:
 dot = 8 left
 parens = 8 left
 unary = 7 left
 star = 6 left
 plus = 5 left
 eq = 4 left
 lambda = 3 right
 assign = 2 right
 field = 1 none

tokens:
  plus= '\+'                   [plus]
  minus= '-'                   [plus]
  star = '\*'                  [star]
  slash = '\/'                 [star]
  mod = '%'                    [star]
  assign= '='                  [assign]
  eq = '=='                    [eq]
  ne = '!='                    [eq]
  lt= '<'                      [eq]
  le = '<='                    [eq]
  gt = '>'                     [eq]
  ge = '>='                    [eq]
  dot = '\.'                   [dot]
  bang = '!' 
  pipe = '\|'      
  at = '@'    
  sharp = '#'
  colon= ':'
  comma=','
  semicolon = ';'
  eol = '\n'
  lpar = '\('                  [parens]
  rpar = '\)' 
  lopt = '\['
  ropt = '\]'
  lcurl = '\{'
  rcurl = '\}'
  _while = 'while'
  _if = 'if'
  _return = 'return'
  _throw = 'throw'
  
  value = "([0-9]+(\.[0-9]+)?)|null|true|false"
  id = "([a-z]|[A-Z]|_)([a-z]|[A-Z]|[0-9]|_)*"
  quote = "'[^()[\]{}':,| \t\r\n;]+"
  text = "\u0022([^\u0022])*\u0022"
  doc = "#([^\r\n])*(\r)?\n"
 
blanks:
 space = "( |\t|\r|\n)"

comments:
 comment = "\/\/([^\r\n])*(\r)?\n"
 
types:
 'id': Token<String>
 'text': Token<String>
 'quote': Token<String>
 'doc': Token<String>
 'value': Token<String>
 'lopt': int
 'lcurl': int
 'pipe': int
 'colon': int
 
 expr: Expr
 instr: Expr
 instrs: List<Expr>
 block: List<Expr>
 selector: Expr
 parameter: Parameter
 block_param: Lambda
 entry: Expr[]

starts:
  script
  repl

productions:
 script = instrs?  { script }
        ;
  
 eoi = 'eol'   { eoi_eol }
     | ';'     { eoi_semi }
     ;
       
 instrs = instr eoi instrs   { instrs_rec }
        | instr eoi          { instrs_instr_eoi }
        | instr              { instrs_instr }
        ;
        
 instr = expr                                       { instr_expr }
       | 'doc'+  expr                               { instr_doc_expr }
       | 'return' expr                              { instr_return }
       | 'throw' expr                               { instr_throw }
       ;
  
 repl = repl eoi expr            { repl_rec_expr }
      | expr                     { repl_expr }
      ; 
  
 block = instrs?      { block }
       ;
       
 block_param = ':' block                            { block_param_block }
             | '|' parameter/'comma'* ':' block     { block_param_lambda }
             ;
  
 parameter = 'quote' 'id'    { parameter_hint_quote_id }
           | 'id' 'id'       { parameter_hint_id_id }
           | 'id'            { parameter_id }
           ;
 
 entry = expr ':' expr   { entry_key_value }
       | expr 'id'       { entry_hint_id }
       | expr 'quote'    { entry_hint_quote }
       | expr            { entry_expr }
       ;      
 
 selector = 'id'      { selector_id }
          | 'quote'   { selector_quote }
          ; 
 
 expr = 'value'                                               { expr_value }
      | 'text'                                                { expr_text }
      | 'quote'                                               { expr_quote }
      | '(' expr ')'                                          { expr_parens }
      | 'id'                                                  { expr_var_access }  
      | 'id' '=' expr                          [assign]       { expr_var_assignment }
      
      | '@' 'id'                                              { expr_field_access }
      | '(' ':' block ')'                                     { expr_block }
      | '(' parameter/'comma'+ ':' block ')'                  { expr_lambda }
      
      | expr '(' expr/'comma'* block_param? ')'               { expr_funcall }
      | expr '.' selector '(' expr/'comma'* block_param? ')'  { expr_mthcall }
      | expr '.' selector                      [field]        { expr_fieldcall }
      
      | 'while' '(' expr ':' block ')'                        { expr_while }
      | 'if' '(' expr ':' block ')'                           { expr_if }
      | 'if' '(' expr ':' block ':' block')'                  { expr_ifelse }
      
      | '[' expr/'comma'* ']'                                 { expr_list }
      | '{' entry/'comma'* '}'                                { expr_map }
      
      | '!' expr                               [unary]        { expr_unary_not }
      | '-' expr                               [unary]        { expr_unary_neg }
      | '+' expr                               [unary]        { expr_unary_plus }
      | expr '+' expr                          [plus]         { expr_binary_add }
      | expr '-' expr                          [plus]         { expr_binary_sub }
      | expr '*' expr                          [star]         { expr_binary_mul }
      | expr '/' expr                          [star]         { expr_binary_div }
      | expr '%' expr                          [star]         { expr_binary_mod }
      | expr '==' expr                         [eq]           { expr_binary_eq }
      | expr '!=' expr                         [eq]           { expr_binary_ne }
      | expr '<' expr                          [eq]           { expr_binary_lt }
      | expr '<=' expr                         [eq]           { expr_binary_le }
      | expr '>' expr                          [eq]           { expr_binary_gt }
      | expr '>=' expr                         [eq]           { expr_binary_ge }
      ;
   
