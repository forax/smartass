package com.github.forax.smartass.grammar.parser;

/** 
 *  This class is generated - please do not edit it 
 */
public enum ProductionEnum {
  instrs_optional_0_empty,
instrs_optional_0_instrs,
script,
eoi_eol,
eoi_semi,
instrs_rec,
instrs_instr_eoi,
instrs_instr,
instr_expr,
instr_return,
instr_throw,
instrs_optional_1_empty,
instrs_optional_1_instrs,
block,
block_param_block,
id_star_2_element,
id_star_2_rec,
id_star_2_empty,
id_star_2_through,
block_param_lambda,
name_id,
name_text,
expr_value,
expr_parens,
expr_var_access,
expr_var_assignment,
expr_field_access,
expr_block,
id_plus_3_element,
id_plus_3_rec,
expr_lambda,
expr_star_4_element,
expr_star_4_rec,
expr_star_4_empty,
expr_star_4_through,
block_param_optional_5_empty,
block_param_optional_5_block_param,
expr_funcall,
expr_star_6_element,
expr_star_6_rec,
expr_star_6_empty,
expr_star_6_through,
block_param_optional_7_empty,
block_param_optional_7_block_param,
expr_mthcall,
expr_while,
expr_if,
expr_ifelse,
expr_unary_not,
expr_unary_neg,
expr_binary_add,
expr_binary_sub,
expr_binary_mul,
expr_binary_div,
expr_binary_mod,
expr_binary_eq,
expr_binary_ne,
expr_binary_lt,
expr_binary_le,
expr_binary_gt,
expr_binary_ge
;
}